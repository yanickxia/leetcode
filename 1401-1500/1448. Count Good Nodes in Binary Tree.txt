// Definition for a binary tree node.
#[derive(Debug, PartialEq, Eq)]
pub struct TreeNode {
    pub val: i32,
    pub left: Option<Rc<RefCell<TreeNode>>>,
    pub right: Option<Rc<RefCell<TreeNode>>>,
}

impl TreeNode {
    #[inline]
    pub fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None,
        }
    }
}

use std::borrow::Borrow;
use std::rc::Rc;
use std::cell::RefCell;

struct Solution {}

impl Solution {
    pub fn good_nodes(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        return match root {
            None => {
                0
            }
            Some(node) => {
                let val = (*node).borrow().val;
                Solution::good_node(Option::Some(node), val)
            }
        };
    }

    fn good_node(root: Option<Rc<RefCell<TreeNode>>>, max: i32) -> i32 {
        return match root {
            None => {
                0
            }
            Some(node) => {
                let val = (*node).borrow().val;

                if val >= max {
                    return 1 + Solution::good_node((*node).borrow().left.clone(), val) + Solution::good_node((*node).borrow().right.clone(), val);
                }

                return Solution::good_node((*node).borrow().left.clone(), max) + Solution::good_node((*node).borrow().right.clone(), max);
            }
        };
    }
}

fn main() {}